package org.prateek.CreationalPatterns.FactoryPattern.Solution;


public class TransportService {
    public static void main(String[] args) {
        //Direct create objects
        Transport vehicle = TransportFactory.createTransport("car");
        vehicle.deliver();
    }
}

===================================================================================================================================================================

The Factory Design Pattern is a creational design pattern that provides an interface for creating objects in a superclass but allows subclasses to alter the type
of objects that will be created. It promotes loose coupling by eliminating the need to bind application-specific classes into your code.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Why Use the Factory Pattern?
To delegate the instantiation logic to a separate component.
To avoid tight coupling between the client and the concrete classes.
To manage and maintain object creation logic in one place.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Structure of the Factory Pattern
Product ‚Äì The interface or abstract class defining the object type.
ConcreteProduct ‚Äì The actual implementation of the Product.
Creator (Factory) ‚Äì Declares the factory method.
ConcreteCreator ‚Äì Implements the factory method to return an instance of a ConcreteProduct.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ Advantages
Encapsulation: Object creation logic is centralized. -Loose Coupling**: Client code depends on interfaces, not concrete classes.
Scalability: Easy to introduce new types without changing client code.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

‚ùå Disadvantages
Can lead to a large number of classes.
Complexity increases with more product types.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
üì¶ Real-World Examples
Java‚Äôs Calendar.getInstance()
Spring Framework‚Äôs ApplicationContext.getBean()
JDBC‚Äôs DriverManager.getConnection()
